<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Z H</title>
  
  <subtitle>ZH&#39;s blogs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ghost-guest@github.io/"/>
  <updated>2018-09-08T14:04:28.009Z</updated>
  <id>http://ghost-guest@github.io/</id>
  
  <author>
    <name>Z H</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>列表生成式与匿名函数</title>
    <link href="http://ghost-guest@github.io/2018/09/08/%E5%88%97%E8%A1%A8%E7%94%9F%E6%88%90%E5%BC%8F%E4%B8%8E%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/"/>
    <id>http://ghost-guest@github.io/2018/09/08/列表生成式与匿名函数/</id>
    <published>2018-09-08T13:08:23.000Z</published>
    <updated>2018-09-08T14:04:28.009Z</updated>
    
    <content type="html"><![CDATA[<h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><p>[x * x for x in range(1, 11)] 就是一个列表生成式, 它的基础语法是:<br>[exp for iter_var in iterable]<br>首先迭代 iterable 里所有内容, 每一次迭代, 都把 iterable 里相应内容放到 iter_var 中, 再在表达式 exp 中应用该 iter_var 的内容, 最后用表达式的计算值生成一个新的列表.<br>例如, 把一个 list 中所有的字符串变成小写:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">L = [<span class="string">'Hello'</span>, <span class="string">'World'</span>, <span class="string">'IBM'</span>, <span class="string">'Apple'</span>]</span><br><span class="line">[s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> L]</span><br><span class="line">&gt;&gt;&gt; [<span class="string">'hello'</span>, <span class="string">'world'</span>, <span class="string">'ibm'</span>, <span class="string">'apple'</span>]</span><br></pre></td></tr></table></figure><h3 id="map（）函数"><a href="#map（）函数" class="headerlink" title="map（）函数"></a>map（）函数</h3><p>map()是 Python 内置的高阶函数，它接收一个函数 f 和一个 list，并通过把函数 f 依次作用在 list 的每个元素上，得到一个新的 list 并返回。<br>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">b = [x + <span class="number">1</span> <span class="keyword">for</span> x <span class="keyword">in</span> a]</span><br><span class="line">print(b)</span><br><span class="line">c = [x <span class="keyword">for</span> x <span class="keyword">in</span> map(lambda x, <span class="attr">y</span>: x + y, a, b)]</span><br><span class="line">print(c)</span><br><span class="line"># d = [x for x in c]</span><br><span class="line"># print(d)</span><br><span class="line">l4 = map(lambda x, <span class="attr">y</span>: (x ** y, x + y), [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l4:</span><br><span class="line">    print(i)</span><br><span class="line"># l4 = map(lambda x, y: (x ** y, x + y), [1, 2, 3], [1, 2, 'a'])</span><br><span class="line"># for i in l4:</span><br><span class="line">#     print(i)</span><br><span class="line">l = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x = map(None, l)</span><br><span class="line">print(x)</span><br><span class="line">结果：</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line">&lt;map object at <span class="number">0x00000191E293EE48</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="filter（）函数"><a href="#filter（）函数" class="headerlink" title="filter（）函数"></a>filter（）函数</h3><p>filter()函数是 Python 内置的另一个有用的高阶函数，filter()函数接收一个函数 f 和一个list，这个函数 f 的作用是对每个元素进行判断，返回 True或 False，filter()根据判断结果自动过滤掉不符合条件的元素，返回由符合条件元素组成的新list。<br>例如，要从一个list [1, 4, 6, 7, 9, 12, 17]中删除偶数，保留奇数，首先，要编写一个判断奇数的函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">def is_odd(x):</span><br><span class="line">    <span class="keyword">return</span> x % <span class="number">2</span> == <span class="number">1</span></span><br></pre></td></tr></table></figure><p>然后，利用filter()过滤掉偶数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;filter(is_odd, [<span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">12</span>, <span class="number">17</span>])</span><br><span class="line">&gt;&gt;&gt;[<span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">17</span>]</span><br></pre></td></tr></table></figure><p>利用filter()，可以完成很多有用的功能，例如，删除 None 或者空字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def is_not_empty(s):</span><br><span class="line">    <span class="keyword">return</span> s and len(s.strip()) &gt; <span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;filter(is_not_empty, [<span class="string">'test'</span>, None, <span class="string">''</span>, <span class="string">'str'</span>, <span class="string">'  '</span>, <span class="string">'END'</span>])</span><br><span class="line">&gt;&gt;&gt;[<span class="string">'test'</span>, <span class="string">'str'</span>, <span class="string">'END'</span>]</span><br></pre></td></tr></table></figure><p>注意: s.strip(rm) 删除 s 字符串中开头、结尾处的 rm 序列的字符。</p><p>当rm为空时，默认删除空白符（包括’\n’, ‘\r’, ‘\t’, ‘ ‘)，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a = <span class="string">' 123'</span></span><br><span class="line">&gt;&gt;&gt; a.strip()</span><br><span class="line"><span class="string">'123'</span></span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; a = <span class="string">'\t\t123\r\n'</span></span><br><span class="line">&gt;&gt;&gt; a.strip()</span><br><span class="line"><span class="string">'123'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;列表生成式&quot;&gt;&lt;a href=&quot;#列表生成式&quot; class=&quot;headerlink&quot; title=&quot;列表生成式&quot;&gt;&lt;/a&gt;列表生成式&lt;/h3&gt;&lt;p&gt;[x * x for x in range(1, 11)] 就是一个列表生成式, 它的基础语法是:&lt;br&gt;[exp 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单例模式和工厂模式</title>
    <link href="http://ghost-guest@github.io/2018/09/07/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ghost-guest@github.io/2018/09/07/单例模式和工厂模式/</id>
    <published>2018-09-07T12:38:12.000Z</published>
    <updated>2018-09-08T13:03:00.204Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p>单例模式是一中常见的软件设计模式 ，该模式的主要目的是确保某个类只有一个实例存在。可以减少内存资源的浪费。</p><h3 id="在python中实现单例的方法"><a href="#在python中实现单例的方法" class="headerlink" title="在python中实现单例的方法"></a>在python中实现单例的方法</h3><p>1.使用模块<br>2.使用<strong>new</strong><br>3.使用装饰器（decorator）<br>4.使用元类（metaclass）</p><h3 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h3><p>其实，Python 的模块就是天然的单例模式，因为模块在第一次导入时，会生成 .pyc 文件，当第二次导入时，就会直接加载 .pyc 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># mysingleton.py</span><br><span class="line">class My_Singleton(object):</span><br><span class="line">    def foo(self):</span><br><span class="line">        pass</span><br><span class="line"> </span><br><span class="line">my_singleton = My_Singleton()</span><br></pre></td></tr></table></figure><p>将上面的代码放到mysingleton.py中，然后这样使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mysingleton <span class="keyword">import</span> my_singleton</span><br><span class="line"> </span><br><span class="line">my_singleton.foo()</span><br></pre></td></tr></table></figure><h3 id="使用new"><a href="#使用new" class="headerlink" title="使用new"></a>使用<strong>new</strong></h3><p>为了使类只能出现一个实例，我们可以使用 <strong>new</strong> 来控制实例的创建过程，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Singleton(object):</span><br><span class="line">    __instance = None</span><br><span class="line">    def __new__(cls, *args, **kw):</span><br><span class="line">        <span class="keyword">if</span> not cls._instance:</span><br><span class="line">            cls.__instance = <span class="keyword">super</span>(Singleton, cls).__new__(cls, *args, **kw)  </span><br><span class="line">        <span class="keyword">return</span> cls.__instance  </span><br><span class="line"> </span><br><span class="line">class MyClass(Singleton):  </span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，我们将类的实例和一个类变量 _instance 关联起来，如果 cls._instance 为 None 则创建实例，否则直接返回 cls._instance。<br>执行情况如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; one = MyClass()</span><br><span class="line">&gt;&gt;&gt; two = MyClass()</span><br><span class="line">&gt;&gt;&gt; one == two</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; one is two</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; id(one), id(two)</span><br><span class="line">(<span class="number">4303862608</span>, <span class="number">4303862608</span>)</span><br></pre></td></tr></table></figure><h3 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h3><p>我们知道，装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> wraps</span><br><span class="line"> </span><br><span class="line">def singleton(cls):</span><br><span class="line">    instances = &#123;&#125;</span><br><span class="line">    @wraps(cls)</span><br><span class="line">    def getinstance(*args, **kw):</span><br><span class="line">        <span class="keyword">if</span> cls not <span class="keyword">in</span> instances:</span><br><span class="line">            instances[cls] = cls(*args, **kw)</span><br><span class="line">        <span class="keyword">return</span> instances[cls]</span><br><span class="line">    <span class="keyword">return</span> getinstance</span><br><span class="line"> </span><br><span class="line">@singleton</span><br><span class="line">class MyClass(object):</span><br><span class="line">    a = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>在上面，我们定义了一个装饰器 singleton，它返回了一个内部函数 getinstance，该函数会判断某个类是否在字典 instances 中，如果不存在，则会将 cls 作为 key，cls(*args, **kw) 作为 value 存到 instances 中，否则，直接返回 instances[cls]。</p><h3 id="使用metaclass"><a href="#使用metaclass" class="headerlink" title="使用metaclass"></a>使用metaclass</h3><p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p><ul><li>拦截类的创建</li><li>修改类的定义</li><li>返回修改后的类<br>使用元类实现单例模式的代码如下：</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">class Singleton(type):</span><br><span class="line">    _instances = &#123;&#125;</span><br><span class="line">    def __call__(cls, *args, **kwargs):</span><br><span class="line">        <span class="keyword">if</span> cls not <span class="keyword">in</span> cls._instances:</span><br><span class="line">            cls._instances[cls] = <span class="keyword">super</span>(Singleton, cls).__call__(*args, **kwargs)</span><br><span class="line">        <span class="keyword">return</span> cls._instances[cls]</span><br><span class="line"> </span><br><span class="line"># Python2</span><br><span class="line">class MyClass(object):</span><br><span class="line">    __metaclass__ = Singleton</span><br><span class="line"> </span><br><span class="line"># Python3</span><br><span class="line"># class MyClass(metaclass=Singleton):</span><br><span class="line">#    pass</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>Python 的模块是天然的单例模式，这在大部分情况下应该是够用的，当然，我们也可以使用装饰器、元类等方法</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>工厂模式是一个在软件开发中用来创建对象的设计模式。</p><p>工厂模式包涵一个超类。这个超类提供一个抽象化的接口来创建一个特定类型的对象，而不是决定哪个对象可以被创建。</p><p>为了实现此方法，需要创建一个工厂类创建并返回。 </p><p>当程序运行输入一个“类型”的时候，需要创建于此相应的对象。这就用到了工厂模式。在如此情形中，实现代码基于工厂模式，可以达到可扩展，可维护的代码。当增加一个新的类型，不在需要修改已存在的类，只增加能够产生新类型的子类。</p><p>简短的说，当以下情形可以使用工厂模式：</p><p>1.不知道用户想要创建什么样的对象</p><p>2.当你想要创建一个可扩展的关联在创建类与支持创建对象的类之间。<br>需求：有一个学雷锋活动，有买米和扫地两个内容，参与的人有大学生和社区志愿者，他们各自的方法不一样。</p><p>如果用简单工厂模式实现:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># coding=utf-8</span><br><span class="line"># factory.py 工厂方法设计模式</span><br><span class="line"># 根据传入参数的不同, 而返回对应的对象</span><br><span class="line"># 案例:你去一家餐厅,给厨子'番茄'和'鸡蛋',厨子返回给你'番茄炒鸡蛋';给厨子'白糖'和'黄瓜',厨子返回给你'白糖拌黄瓜'</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class TomatoesAndEgg:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.data = <span class="string">"男士喜欢吃番茄炒蛋"</span></span><br><span class="line"> </span><br><span class="line">    def getData(self):</span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">class SugarAndCucumber:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.data = <span class="number">123456</span></span><br><span class="line"> </span><br><span class="line">    def getData(self):</span><br><span class="line">        <span class="keyword">return</span> self.data</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 工厂方法: 根据传入参数的不同, 而返回对应的对象</span><br><span class="line">def cook_factory(sex):</span><br><span class="line">    <span class="keyword">if</span> sex == <span class="string">"man"</span>:</span><br><span class="line">        food = TomatoesAndEgg</span><br><span class="line">    elif sex == <span class="string">"woman"</span>:</span><br><span class="line">        food = SugarAndCucumber</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        raise ValueError(<span class="string">"请出入正确的性别: &#123;&#125;"</span>.format(sex))</span><br><span class="line">    <span class="keyword">return</span> food()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    man = cook_factory(<span class="string">"man"</span>)</span><br><span class="line">    woman = cook_factory(<span class="string">"woman"</span>)</span><br><span class="line"> </span><br><span class="line">    data_man = man.getData()  # 返回String类型数据</span><br><span class="line">    data_woman = woman.getData()  # 返回int类型数据</span><br><span class="line">    # getData()返回不同类型的数据, 这在实际开发中是很常见的</span><br><span class="line"> </span><br><span class="line">    print(data_man)  # =&gt; 男士喜欢吃番茄炒蛋</span><br><span class="line">    print(data_woman)  # =&gt; 123456</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;单例模式&quot;&gt;&lt;a href=&quot;#单例模式&quot; class=&quot;headerlink&quot; title=&quot;单例模式&quot;&gt;&lt;/a&gt;单例模式&lt;/h3&gt;&lt;p&gt;单例模式是一中常见的软件设计模式 ，该模式的主要目的是确保某个类只有一个实例存在。可以减少内存资源的浪费。&lt;/p&gt;
&lt;h3 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>FastDFS</title>
    <link href="http://ghost-guest@github.io/2018/09/06/FastDFS/"/>
    <id>http://ghost-guest@github.io/2018/09/06/FastDFS/</id>
    <published>2018-09-06T13:09:52.000Z</published>
    <updated>2018-09-06T13:45:44.220Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是FastFDS"><a href="#什么是FastFDS" class="headerlink" title="什么是FastFDS"></a>什么是FastFDS</h3><p>FastDFS 是用 c 语言编写的一款开源的分布式文件系统。FastDFS 为互联网量身定制， 充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用 FastDFS 很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。<br>FastDFS 架构包括 Tracker server 和 Storage server。客户端请求 Tracker server 进行文 件上传、下载，通过 Tracker server 调度最终由 Storage server 完成文件上传和下载。</p><ul><li>Tracker server 作用是负载均衡和调度，通过 Tracker server 在文件上传时可以根据一些 策略找到 Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服务器。</li><li><p>Storage server 作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上， Storageserver 没有实现自己的文件系统而是利用操作系统 的文件系统来管理文件。可以将 storage 称为存储服务器。</p></li><li><p>Tracker: 管理集群，tracker 也可以实现集群。每个 tracker 节点地位平等。收集 Storage 集群的状态。</p></li><li>Storage: 实际保存文件， Storage 分为多个组，每个组之间保存的文件是不同的。每 个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有 主从的概念。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是FastFDS&quot;&gt;&lt;a href=&quot;#什么是FastFDS&quot; class=&quot;headerlink&quot; title=&quot;什么是FastFDS&quot;&gt;&lt;/a&gt;什么是FastFDS&lt;/h3&gt;&lt;p&gt;FastDFS 是用 c 语言编写的一款开源的分布式文件系统。FastDFS
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Celery</title>
    <link href="http://ghost-guest@github.io/2018/09/06/Celery/"/>
    <id>http://ghost-guest@github.io/2018/09/06/Celery/</id>
    <published>2018-09-06T11:50:12.000Z</published>
    <updated>2018-09-06T13:08:36.803Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Celery介绍"><a href="#Celery介绍" class="headerlink" title="Celery介绍"></a>Celery介绍</h3><p>1.Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现任务的异步处理。用于解决程序中耗时的任务。<br>2.优点：简单，高可用，快速，灵活<br>3.Celery安装和使用：Celery默认brober是Rabbit MQ，可以改为Redis数据库，只需要配置：brober_url=’redis://127.0.0.1:6379/14’<br>4.项目中异步的执行函数main.py</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> . import config</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"># 设置django的配置</span><br><span class="line">os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"meiduo.settings"</span>)</span><br><span class="line"># 创建对象</span><br><span class="line">app = Celery(<span class="string">'meiduo'</span>)</span><br><span class="line"># 加载配置</span><br><span class="line">app.config_from_object(config)</span><br><span class="line"># 初始化任务</span><br><span class="line"># 在指定的包中找到tasks.py 文件，在这个文件中找@app.task的函数</span><br><span class="line">app.autodiscover_tasks([</span><br><span class="line">    <span class="string">'celery_tasks.sms'</span>,</span><br><span class="line">    <span class="string">'celery_tasks.email'</span>,</span><br><span class="line">    <span class="string">'celery_tasks.html'</span></span><br><span class="line">])</span><br></pre></td></tr></table></figure><ol start="5"><li>在异步包中添加需要执行异步的任务tasks</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> utils.ytx_sdk.sendSMS <span class="keyword">import</span> CCP</span><br><span class="line"><span class="keyword">from</span> celery_tasks.main <span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">@app.task(name=<span class="string">'sms_send'</span>)</span><br><span class="line">def sms_send(mobile, sms_code, expires, template_id):</span><br><span class="line">    # CCP.sendTemplateSMS(mobile, sms_code, expires, template_id)</span><br><span class="line">    print(sms_code)</span><br></pre></td></tr></table></figure><p>6.在需要的视图中执行异步任务：<br>异步对象名.delay(任务所需参数）——–调用异步任务<br>7.启动celery服务<br>celery -A celery_tasks.main worker -l info<br>8.celery构架组成：<br>中间代理人：brober<br>任务执行单元worker，也叫职程<br>执行结果存储backend</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Celery介绍&quot;&gt;&lt;a href=&quot;#Celery介绍&quot; class=&quot;headerlink&quot; title=&quot;Celery介绍&quot;&gt;&lt;/a&gt;Celery介绍&lt;/h3&gt;&lt;p&gt;1.Celery 是一个 基于python开发的分布式异步消息任务队列，通过它可以轻松的实现
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Restful风格</title>
    <link href="http://ghost-guest@github.io/2018/09/06/Restful%E9%A3%8E%E6%A0%BC/"/>
    <id>http://ghost-guest@github.io/2018/09/06/Restful风格/</id>
    <published>2018-09-06T11:12:16.000Z</published>
    <updated>2018-09-06T11:47:56.030Z</updated>
    
    <content type="html"><![CDATA[<p>Rest即Representational State Transfer ,直译为‘表现层状态转化’，最大的几个特点是：资源， 统一接口，URI和无状态。</p><h3 id="Restful风格特点"><a href="#Restful风格特点" class="headerlink" title="Restful风格特点"></a>Restful风格特点</h3><p>1.资源：以json(或其他Representation)为载体的、面向用户的一组数据集。<br>2.统一接口：Restful规定数据的操作，增删改查分别对应着Http方法，GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源，这样就统一了数据操作的接口，仅通过HTTP方法，就可以完成对数据的所有增删查改工作。<br>即：<br>GET（SELECT）：从服务器取出资源（一项或多项）。<br>POST（CREATE）：在服务器新建一个资源。<br>PUT（UPDATE）：在服务器更新资源（客户端提供完整资源数据）。<br>PATCH（UPDATE）：在服务器更新资源（客户端提供需要修改的资源数据）。<br>DELETE（DELETE）：从服务器删除资源。</p><ol start="3"><li>URI<br>可以用一个URI（统一资源定位符）指向资源，即每个URI都对应一个特定的资源。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或识别符。</li><li>无状态<br>所谓无状态的，即所有的资源，都可以通过URI定位，而且这个定位与其他资源无关，也不会因为其他资源的变化而改变。因为Restful风格是无状态的，所以认证机制就尤为重要，常用的认证机制有：Basic auth，token auth和OAuth。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rest即Representational State Transfer ,直译为‘表现层状态转化’，最大的几个特点是：资源， 统一接口，URI和无状态。&lt;/p&gt;
&lt;h3 id=&quot;Restful风格特点&quot;&gt;&lt;a href=&quot;#Restful风格特点&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Restful风格" scheme="http://ghost-guest@github.io/tags/Restful%E9%A3%8E%E6%A0%BC/"/>
    
  </entry>
  
  <entry>
    <title>MVT与MCV</title>
    <link href="http://ghost-guest@github.io/2018/09/06/MVT%E4%B8%8EMCV/"/>
    <id>http://ghost-guest@github.io/2018/09/06/MVT与MCV/</id>
    <published>2018-09-06T08:55:13.000Z</published>
    <updated>2018-09-06T09:11:43.218Z</updated>
    
    <content type="html"><![CDATA[<p>MVC的核心思想：解耦，让不同的代码之间降低耦合，增强代码的可移植性和可扩展性，实现向后兼容。</p><h3 id="Web-MVC各部分的功能："><a href="#Web-MVC各部分的功能：" class="headerlink" title="Web MVC各部分的功能："></a>Web MVC各部分的功能：</h3><p>1.Model：主要封装了对数据库层的的访问，对数据库中的数据进行增，删，改，查操作。<br>2.View：用于封装结果，生成页面html内容与用户进行交互。<br>3.Controller：用于接受请求，处理业务逻辑，与Model和View交互，返回结果。</p><p>MVT： Django 遵循MVC设计，并有一个专有名词：MVT</p><h3 id="MVT各部分的功能"><a href="#MVT各部分的功能" class="headerlink" title="MVT各部分的功能"></a>MVT各部分的功能</h3><p>1.Model： 负责与数据库交互，进行数据操作。<br>2.View：与MVC中的C的功能一样，接受请求，处理业务，返回应答。<br>3.Template： 与MVC中的V的功能一样，负责封装要返回的html。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MVC的核心思想：解耦，让不同的代码之间降低耦合，增强代码的可移植性和可扩展性，实现向后兼容。&lt;/p&gt;
&lt;h3 id=&quot;Web-MVC各部分的功能：&quot;&gt;&lt;a href=&quot;#Web-MVC各部分的功能：&quot; class=&quot;headerlink&quot; title=&quot;Web MVC各部
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python的PEP8规范</title>
    <link href="http://ghost-guest@github.io/2018/09/06/PEP8%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://ghost-guest@github.io/2018/09/06/PEP8编码规范/</id>
    <published>2018-09-06T07:50:35.000Z</published>
    <updated>2018-09-06T11:13:00.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PEP8-Python-编码规范"><a href="#PEP8-Python-编码规范" class="headerlink" title="PEP8 Python 编码规范"></a>PEP8 Python 编码规范</h2><h3 id="代码编程"><a href="#代码编程" class="headerlink" title="代码编程"></a>代码编程</h3><ol><li>缩进，4个空格的缩进，不使用Tab，更不能混合使用Tab和空格。</li><li>每行最大长度79，换行可以使用反斜杠，最好使用圆括号。</li><li>类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。</li></ol><h3 id="文档编排"><a href="#文档编排" class="headerlink" title="文档编排"></a>文档编排</h3><p>1.模块内容的顺序：模块说明和docstring—import—globals&amp;constants—其他定义。其中import部分，又按标准、三方和自己编写顺序依次排放，之间空一行。<br>2.不要在一句import中多个库，比如import os, sys不推荐。<br>3.如果采用from XX import XX引用库，可以省略‘module.’，都是可能出现命名冲突，这时就要采用import XX。</p><h3 id="空格的使用"><a href="#空格的使用" class="headerlink" title="空格的使用"></a>空格的使用</h3><pre><code>总体原则，避免不必要的空格。</code></pre><p>1 各种右括号前不要加空格。<br>2 逗号、冒号、分号前不要加空格。<br>3 函数的左括号前不要加空格。如Func(1)。<br>4 序列的左括号前不要加空格。如list[2]。<br>5 操作符左右各加一个空格，不要为了对齐增加空格。<br>6 函数默认参数使用的赋值符左右省略空格。<br>7 不要将多句语句写在同一行，尽管使用‘；’允许。<br>8 if/for/while语句中，即使执行语句只有一句，也必须另起一行。</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>  总体原则，错误的注释不如没有注释。所以当一段代码发生变化时，第一件事就是要修改注释！<br>        注释必须使用英文，最好是完整的句子，首字母大写，句后要有结束符，结束符后跟两个空格，开始下一句。如果是短语，可以省略结束符。</p><h3 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h3><pre><code>总体原则，新编代码必须按下面命名风格进行，现有库的编码尽量保持风格。</code></pre><p>1 尽量单独使用小写字母‘l’，大写字母‘O’等容易混淆的字母。<br>2 模块命名尽量短小，使用全部小写的方式，可以使用下划线。<br>3 包命名尽量短小，使用全部小写的方式，不可以使用下划线。<br>4 类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。<br>5 异常命名使用CapWords+Error后缀的方式。<br>6 全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是<strong>all</strong>机制;二是前缀一个下划线。<br>7 函数命名使用全部小写的方式，可以使用下划线。<br>8 常量命名使用全部大写的方式，可以使用下划线。<br>9 类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。<br>9 类的属性有3种作用域public、non-public和subclass API，可以理解成C++中的public、private、protected，non-public属性前，前缀一条下划线。<br>11 类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。<br>12 为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。比如：类Foo中声明<strong>a,访问时，只能通过Foo._Foo</strong>a，避免歧义。如果子类也叫Foo，那就无能为力了。<br>13 类的方法第一个参数必须是self，而静态方法第一个参数必须是cls。</p><h4 id="编码建议"><a href="#编码建议" class="headerlink" title="编码建议"></a>编码建议</h4><p>1 编码中考虑到其他python实现的效率等问题，比如运算符‘+’在CPython（Python）中效率很高，都是Jython中却非常低，所以应该采用.join()的方式。<br>2 尽可能使用‘is’‘is not’取代‘==’，比如if x is not None 要优于if x。<br>3 使用基于类的异常，每个模块或包都有自己的异常类，此异常类继承自Exception。<br>4 异常中不要使用裸露的except，except后跟具体的exceptions。<br>5 异常中try的代码尽可能少。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PEP8-Python-编码规范&quot;&gt;&lt;a href=&quot;#PEP8-Python-编码规范&quot; class=&quot;headerlink&quot; title=&quot;PEP8 Python 编码规范&quot;&gt;&lt;/a&gt;PEP8 Python 编码规范&lt;/h2&gt;&lt;h3 id=&quot;代码编程&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="PEP8规范" scheme="http://ghost-guest@github.io/tags/PEP8%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://ghost-guest@github.io/2018/09/03/hello-world/"/>
    <id>http://ghost-guest@github.io/2018/09/03/hello-world/</id>
    <published>2018-09-03T13:08:57.245Z</published>
    <updated>2018-09-03T13:08:57.245Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
